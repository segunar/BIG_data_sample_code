%
%----------------------------------
%
% 1. POLYMORPHISM
%
%----------------------------------
%
%----------------------------------
% 1. fst
%----------------------------------
%
fst:: A -> B -> A
fst X Y = X
%
%----------------------------------
% 2. snd
%----------------------------------
%
snd:: A -> B -> B
snd X Y = Y
%
%----------------------------------
% 3. take
%----------------------------------
%
take:: int -> [A] -> [A]
take N [] = []
take N [X|Xs] = if N == 0 then [] else [X|take (N-1) Xs]
%
%----------------------------------
%
% 2. HIGHER ORDER FUNCTIONS
%
%----------------------------------
%
%----------------------------------
% 4. map
%----------------------------------
%
map:: (A -> B) -> [A] -> [B]
map F [] = []
map F [X|Xs] = [(F X)|(map F Xs)]
%
%----------------------------------
% 5. filter
%----------------------------------
%
filter:: (A -> bool) -> [A] -> [A]
filter P [] = []
filter P [X|Xs] = [X | filter P Xs] <==
	P X == true
filter P [X|Xs] = filter P Xs <==
	P X == false
%
%----------------------------------
% 6. fold
%----------------------------------
%
fold:: (A -> B -> A) -> A -> [B] -> A
fold F Z [] = Z
fold F Z [X|Xs] = fold F (F Z X) Xs
%
%----------------------------------
%
% 3. PARTIAL APPLICATION
%
%----------------------------------
%
% SAME FUNCTIONS AS ABOVE
%
%----------------------------------
%
% 4. LAZY EVALUATION
%
%----------------------------------
%
%----------------------------------
% 7. loop
%----------------------------------
%
loop:: A
loop = loop
%
%----------------------------------
% 8. from
%----------------------------------
%
from:: int -> [int]
from N = [N | from (N+1)]
%
%----------------------------------
% 9. notDiv
%----------------------------------
%
notDiv:: int -> int -> bool
notDiv X Y --> mod Y X > 0
%
%----------------------------------
% 10. sieve
%----------------------------------
%
sieve:: [int] -> [int]
sieve [X|Xs] = [X | filter (notDiv X) (sieve Xs)]
%
%----------------------------------
% 11. primes
%----------------------------------
%
primes:: [int]
primes = sieve (from 2)
%
%----------------------------------
%
% SESSION
%
%----------------------------------
%
%----------------------------------
% 1. POLYMORPHISM
%----------------------------------
%
%fst 3 True == Res
%fst True 3 == Res
%
%take 3 [1,3,5,7,9] == Res
%take 3 [true, false, true, false, false] == Res
%take 1 [1,3,5,7,9] == Res
%take 0 [1,3,5,7,9] == Res
%take 10 [1,3,5,7,9] == Res
%
%----------------------------------
% 2. HIGHER ORDER FUNCTIONS
%----------------------------------
%
%map (+1) [1,2,3] == Res
%filter (>3) [1,5,2,7] == Res
%fold (+) 0 [1,2,3,4] == Res
%
%----------------------------------
% 3. PARTIAL APPLICATION
%----------------------------------
%
%map (+1) [1,2,3] == Res
%map (+2) [1,2,3] == Res
%filter (>5) [1,5,2,7] == Res
%filter (==4) [1,5,4,2,7,4] == Res
%
%----------------------------------
% 4. LAZY EVALUATION
%----------------------------------
%
%loop == Res
%snd loop 3 == Res
%from 1 == Res
%take 5 (from 1) == Res
%take 10 primes == Res